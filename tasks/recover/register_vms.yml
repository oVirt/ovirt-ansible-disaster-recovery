- name: Fetch unregistered VMs from storage domain
  ovirt_storage_vms_facts:
      nested_attributes: "id"
      unregistered: True
      storage_domain: "{{ storage.name }}"
      auth: "{{ ovirt_auth }}"

- name: Set unregistered VMs
  set_fact:
      unreg_vms: "{{ unreg_vms|default([]) }} + {{ ovirt_storage_vms }}"

# TODO: We should filter out vms which were already exists in the setup (diskless VMs)
- name: Register unregistered VM
  ovirt_vms:
      state: registered
      storage_domain: "{{ storage.name }}"
      id: "{{ unreg_vm.id }}"
      auth: "{{ ovirt_auth }}"
      allow_partial_import: "{{ dr_partial_import }}"
      cluster_mappings: "{{ dr_cluster_map }}"
      domain_mappings: "{{ dr_domain_map }}"
      role_mappings: "{{ dr_role_map }}"
      affinity_group_mappings: "{{ dr_affinity_group_map }}"
      affinity_label_mappings: "{{ dr_affinity_label_map }}"
      vnic_profile_mappings:  "{{ dr_network_map }}"
      lun_mappings: "{{ dr_lun_map }}"
      reassign_bad_macs: "{{ dr_reset_mac_pool }}"

  # The main task already declared ignore errors so that might be redundant to put it here
  # ignore_errors: "{{ ignore | default(yes) }}"
  with_items: "{{ ovirt_storage_vms }}"
  # We use loop_control so storage.name will not be overriden by the nested loop.
  loop_control:
      loop_var: unreg_vm


